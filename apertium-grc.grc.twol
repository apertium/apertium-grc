Alphabet
 Α Β Γ Δ Ε Ζ Η Θ Ι Κ Λ Μ Ν Ξ Ο Π Ρ Σ Τ Υ Φ Χ Ψ Ω
 α β γ δ ε ζ η θ ι κ λ μ ν ξ ο π ρ σ τ υ φ χ ψ ω
 ς
 ῃ ῳ
 Ἀ Ἐ Ἠ Ἰ Ὀ   Ὠ
 ἀ ἐ ἠ ἰ ὀ ὐ ὠ
 Ἁ Ἑ Ἡ Ἱ Ὁ Ὑ Ὡ
 ἁ ἑ ἡ ἱ ὁ ὑ ὡ

 ! pass these through to the stress twol file
 %{'%} %{'%!%} %{%~%} %{%+long%} %{%-long%}

 %{%+longd%}:0 %{%+longd%}:υ %{%+longd%}:%{%+long%}
 %{σ%}:0 %{σ%}:σ
 %{ε%}:ἐ %{ε%}:0
 %{ε%~%}:0
 %{'%?%}:0 %{'%?%}:%{'%} %{%~%?%}:0 %{%~%?%}:%{%~%} %{'%$%}:0
 %{%(ν%)%}:0 %{%(ν%)%}:ν
 %{%+%}
 %{redup%}
 %{%|%}:0

 %{g%+%}:0 %{g%-%}:0
 %{οω%}:ο %{οω%}:ω
 %{εη%}:ε %{εη%}:η
 ;

Sets

Vowel = Α Ε Η Ι Ο Υ Ω
        α ε η ι ο υ ω
        ῃ ῳ ;

Consonant = Β Γ Δ Ζ Θ Κ Λ Μ Ν Ξ Π Ρ Σ Τ Φ Χ Ψ
            β γ δ ζ θ κ λ μ ν ξ π ρ σ τ φ χ ψ
                                    ς ;

Dental = Τ Δ Θ
         τ δ θ ;

Rules

"augment is ε only before consonants"
%{ε%}:ἐ <=> .#. ( %{'%} ) :0* _ :Consonant ;
            except _ ?* %{ε%~%}:0 ;

"aug -> ε after prep"
%{ε%}:ε <=> Consonant ?* _ :Consonant ;

"breathing mark after augment"
ι:ἰ <=> [ %{ε%}:0 | .#. ( %{'%} ) ( α | ε | ο ) ] _ ;

"aug + prep part 1"
%{ε%}:0 <=> _ ?* %{ε%~%}:0 ;

"aug + prep part 2"
ο:ε <=> %{ε%}:0 ?* _ %{ε%~%}:0 ;

"aug + α/ε → η"
ε:ἠ <=> %{ε%}:0 _ ;
        except _ ?* %{ε%~%}:0 ;

"aug + ο → ω"
ο:ὠ <=> %{ε%}:0 _ ;
        except _ ?* %{ε%~%}:0 ;

"preposition before augment"
Vx:0 <=> _ %{ε%}: ;
         where Vx in ( α ι ο ) ;

"ο {+long} -> ω part 2"
%{%+long%}:0 <=> ο:ω ( %{'%} ) _ ;
                 ο υ ( :%{'%} ) _ ;

"ο {+longd} -> ου"
%{%+longd%}:υ <=> ο _ ;

"ε {+long} -> η part 1"
ε:η <=> ~[ %{ε%}: ] _ ( %{'%} | %{'%?%}: ) %{%+long%}: ;

"ο {+long} -> ω part 1"
ο:ω <=> _ ( %{'%} | %{'%?%}: ) %{%+long%}: ;
        except .#. ( %{'%} ) %{ε%}: _ ;

"ε {+long} -> η part 2"
%{%+long%}:0 <=> [ ε:η | ο:ω ] ( %{'%} | %{'%?%}: ) _ ;
                 %{%+long%}: _ ;
                 ε υ ( %{'%?%}: )  _ ;
                 ω _ ;

"ε' -> ει' after {+longd}"
0:ι <=> ε _ %{'%} %{%+longd%}:0 ;

"ε' -> ει' after {+longd} part 2"
%{%+longd%}:0 <=> 0:ι %{'%} _ ;
                  ω _ ;

"{+longd} -> {+long}"
%{%+longd%}:%{%+long%} <=> α _ ;

"η + ι part 1"
η:ῃ <=> _ %{σ%}:0 ι:0 ;

"η + ι part 2"
ι:0 <=> η:ῃ %{σ%}:0 _ ;

"inserting noun acute stress marker"
%{'%?%}:%{'%} <=> _ ?* %{'%$%}:0 ;

"inserting noun circumflex stress marker"
%{%~%?%}:%{%~%} <=> _ ?* %{'%$%}:0 ;
                    except %{'%?%}: ?* _ ;

"reduplication"
%{redup%}:Cx <=> _ [ ε | ι ] Cx ;
                 where Cx in Consonant ;

"no final μ"
μ:ν <=> _ .#. ;

"no final dental or before σ"
Cx:0 <=> _ ( %{g%+%}:0 | %{g%-%}:0 ) .#. ;
         _ ( %{'%?%}: | %{g%+%}:0 | %{g%-%}:0 )* [ :σ | :ς ] ;
         where Cx in Dental ;

"{σ} deletes between vowels"
%{σ%}:0 <=> Vowel: _ Vowel: ;

!"vowel contraction ε + αι 1"
!ε:ῃ <=> _ [ %{σ%}:0 | %{%+%}:0 ] α: ι: ;

!"vowel contraction ε + αι 2"
!α:0 <=> ε:ῃ [ %{σ%}:0 | %{%+%}:0 ] _ ι: ;

!"vowel contraction ε + αι 3"
!ι:0 <=> ε:ῃ [ %{σ%}:0 | %{%+%}:0 ] α: _ ;

"final σ"
σ:ς <=> _ .#. ;
        except [ π: | β: | φ: | κ: | υ: | χ: ] _ ;

"assimilation"
Cx:Cy <=> _ Cz ;
          where Cx in ( π π β β φ φ κ κ γ γ χ χ )
                Cy in ( β φ π φ π β γ χ κ χ κ γ )
                Cz in ( δ θ τ θ τ δ δ θ τ θ τ δ )
          matched ;

"stop before sigma part 1"
Cx:Cy <=> _ σ:0 ;
          where Cx in ( π β φ κ γ χ )
                Cy in ( ψ ψ ψ ξ ξ ξ )
          matched ;

"stop before sigma part 2"
σ:0 <=> Cx:Cy _  ;
          where Cx in ( π β φ κ γ χ )
                Cy in ( ψ ψ ψ ξ ξ ξ )
          matched ;

"vowel gradation 1"
%{οω%}:ω <=> _ ?* %{g%+%}:0 ;

"vowel gradation 2"
%{εη%}:η <=> _ ?* %{g%+%}:0 ;

! Resources:
! http://wiki.apertium.org/wiki/Starting_a_new_language_with_HFST#Enter_twol
! https://kitwiki.csc.fi/twiki/bin/view/KitWiki/HfstHome
! https://github.com/hfst/
! http://wiki.apertium.org/wiki/Twol
! http://wiki.apertium.org/wiki/Hfst

